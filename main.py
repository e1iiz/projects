from aiogram import Bot,Dispatcher,types,executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from  aiogram.types import BotCommand
from config import token
from booking_handler import BookingHandler
from booking_handler import BookingState
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging 
# import random_tip
# import random

storage = MemoryStorage()
bot=Bot(token=token)
dp=Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)
user_state = {}



button1= types.KeyboardButton('–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ üíá')
button2=types.KeyboardButton('–ú–∞–Ω–∏–∫—é—Ä üíÖ')
button3=types.KeyboardButton('–ú–∞—Å—Å–∞–∂ üíÜ‚Äç‚ôÄÔ∏è')
button4=types.KeyboardButton('–†–µ—Å–Ω–∏—Ü—ã ü´∂')
button5=types.KeyboardButton('–ê–∫—Ü–∏–∏')
keyboard2=types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)

keyboard2.add(button1,button2)
keyboard2.add(button3,button4)
keyboard2.add(button5)


@dp.message_handler(commands='start')
async def services(message: types.Message):
    with open ('image/image.png','rb') as photo:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption= "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù—É—Ä–∏–∑–∞  \n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–µ.üëáüëáüëáüëáüëá",reply_markup=keyboard2
        )
async def on_startup(dp):
    await bot.set_my_commands([
        BotCommand(command='/start', description='–ó–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç'),
        BotCommand(command='/adress', description='–ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'),
        BotCommand(command='/manue', description='–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é')
    ])


# tips = [
#             "–°–æ–≤–µ—Ç 1: –†–µ–≥—É–ª—è—Ä–Ω–æ —É–≤–ª–∞–∂–Ω—è–π—Ç–µ –∫–æ–∂—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –µ—ë —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏.",
#             "–°–æ–≤–µ—Ç 2: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º, —á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –∫–æ–∂—É –æ—Ç —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è.",
#             "–°–æ–≤–µ—Ç 3: –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏ –∫–æ–∂–∏.",
#             "–°–æ–≤–µ—Ç 4: –ò–∑–±–µ–≥–∞–π—Ç–µ —á–∞—Å—Ç–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è –ª–∏—Ü–∞ —Ä—É–∫–∞–º–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø—Ä—ã—â–µ–π.",
#             "–°–æ–≤–µ—Ç 5: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—á–∏—â–∞—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏."
#         ]

class PromoState(StatesGroup):
    waiting_for_number = State()

user_attempts={}

@dp.message_handler(text = '–ê–∫—Ü–∏–∏')
# @dp.message_handler(lambda message: message.text == "–ê–∫—Ü–∏–∏")
# async def promo_message(message: types.Message):
#     await message.answer("–£ –Ω–∞—Å 20% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –ª—é–±–æ–π —Ü–∏—Ñ—Ä–æ–π 1-2-3-4.")
#     await PromoState.waiting_for_number.set()

# @dp.message_handler(state=PromoState.waiting_for_number)
# async def check_number(message: types.Message, state: FSMContext):
#     correct_number = '2'  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä  2
#     if message.text == correct_number:
#         await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª–∏. –£ –≤–∞—Å 20% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏. –ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ.")
#         await message.answer_contact(phone_number='+996777797921', first_name='Eliza', last_name='Erkinbek kyzy')
#         await message.answer_contact(phone_number='+996990130081', first_name='Nuriza', last_name='Xamytbekova')
#     else:
#         await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–∫—Ü–∏–∏' —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
#     await state.finish()
async def promo_message(message: types.Message):
    user_id = message.from_user.id

    if user_attempts.get(user_id, 0) >= 2:
        await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É. –°–∫–∏–¥–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.")
    else:
        await message.answer("–£ –Ω–∞—Å 20% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –ª—é–±–æ–π —Ü–∏—Ñ—Ä–æ–π 1-2-3-4.")
        await PromoState.waiting_for_number.set()

@dp.message_handler(state=PromoState.waiting_for_number)
async def check_number(message: types.Message, state: FSMContext):
    correct_number = '2'  
    user_id = message.from_user.id
    user_attempts[user_id] = user_attempts.get(user_id, 0) + 1

    if message.text == correct_number:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª–∏. –£ –≤–∞—Å 20% —Å–∫–∏–¥–∫–∞ –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏. –ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ.")
        await message.answer_contact(phone_number='+996777797921', first_name='Eliza', last_name='Erkinbek kyzy')
        await message.answer_contact(phone_number='+996990130081', first_name='Nuriza', last_name='Xamytbekova')
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–∫—Ü–∏–∏' —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    
    if user_attempts[user_id] >= 2:
        await message.answer("–°–∫–∏–¥–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.")
    
    await state.finish()




@dp.message_handler(commands='adress')
async def adress(message: types.Message):
    await message.answer('–í–æ—Ç –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: ‚òéÔ∏è')
    await message.answer_contact(phone_number='+996777797921', first_name='Eliza', last_name='Erkinbek kyzy')
    await message.answer_contact(phone_number='+996990130081', first_name='Nuriza', last_name='Xamytbekova')
    await message.answer('–ú—ã —Ä–∞–¥—ã –±—É–¥–µ–º –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å!')
    await message.reply(' üìç –ù–∞—à –∞–¥—Ä–µ—Å: –ì–æ—Ä–æ–¥ –û—à, —Ä–∞–π–æ–Ω –ö–∞—Ä–∞-–°—É—É, —Ç—Ä—Ü –ê–π–±–∏–π–∫–µ 1-—ç—Ç–∞–∂ ')
    await message.reply_location(latitude=40.708585, longitude=72.891825)

@dp.message_handler(commands='manue')
async def back_to_main_manue(message:types.Message):
    await services(message)


class Hairdressing_services:
    @dp.message_handler(text='–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ üíá')
    async def parix(message:types.Message):
        hair_keyboard= types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
        hair_button1= types.KeyboardButton('‚ûñ C—Ç—Ä–∏–∂–∫–∞ ‚ûñ')
        hair_button2=types.KeyboardButton('‚ûñ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å ‚ûñ')
        hair_button3=types.KeyboardButton('üëà –ù–∞–∑–∞–¥')
        hair_button4 = types.KeyboardButton('‚ûñ –ú–∞—Å—Ç–µ—Ä –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏—Ö —É—Å–ª—É–≥ ‚ûñ')

        hair_keyboard.add(hair_button1)
        hair_keyboard.add(hair_button2)
        hair_keyboard.add(hair_button3, hair_button4)

        with open ('image/image4.png', 'rb') as photo:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption="""–í –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 2 –≤–∏–¥–∞ –ø–∞—Ä–∏—Ö–º–∞—Ö–µ—Ä—Å–∫–∏—Ö —É—Å–ª—É–≥:
                \n- C—Ç—Ä–∏–∂–∫–∞
                \n- –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å""",
                reply_markup=hair_keyboard 
            ) 

    @dp.message_handler(lambda message: message.text == 'üëà –ù–∞–∑–∞–¥')
    async def handle_back2(message: types.Message):
        await services(message)

    @dp.message_handler(text='–ú–∞—Å—Ç–µ—Ä –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏—Ö —É—Å–ª—É–≥')
    async def show_master_info(message: types.Message):
        master_name = "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
        master_description = (
            "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 10 –ª–µ—Ç\n"
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä-—Å—Ç–∏–ª–∏—Å—Ç\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å, "
            "—É—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–∞–¥–µ–±–Ω—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫\n"
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è —à–∫–æ–ª–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞\n"
            "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç: +7 (123) 456-78-90"
        )

        with open('image/master_hair.png', 'rb') as photo:  
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=f"–ú–∞—Å—Ç–µ—Ä: {master_name}\n\n{master_description}"
            )

    class Haircut:
        @dp.message_handler(text='‚ûñ C—Ç—Ä–∏–∂–∫–∞ ‚ûñ')
        async def hair_cut(message: types.Message):
            hair_keyboard = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_hairdressing_services')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_C—Ç—Ä–∏–∂–∫–∞')
            
            hair_keyboard.add(button2)
            hair_keyboard.add(button1)

            with open('image/image7.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–ñ–µ–Ω—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥—ã:\n
        –õ–µ—Å–µ–Ω–∫–∞: –ü–µ—Ä–µ—Ö–æ–¥—ã –¥–ª–∏–Ω—ã –≤–æ–ª–æ—Å —Å–æ–∑–¥–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç –ª–µ—Å—Ç–Ω–∏—Ü—ã, —á—Ç–æ –ø—Ä–∏–¥–∞–µ—Ç –æ–±—ä–µ–º.
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:–æ—Ç 30 –º–∏–Ω—É—Ç –∏ –≤—ã—à–µ
                –¶–µ–Ω–∞: 450 —Å–æ–º\n
        –ö–∞—Å–∫–∞–¥: –°–ª–æ–∏ –≤–æ–ª–æ—Å —Å–æ–∑–¥–∞—é—Ç –∫–∞—Å–∫–∞–¥–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –ø—Ä–∏–¥–∞—é—Ç –¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–º.
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥—É—Å—Ç–æ—Ç—ã –≤–æ–ª–æ—Å, –æ—Ç 30 –º–∏–Ω—É—Ç –∏ –≤—ã—à–µ
                –¶–µ–Ω–∞: 500 —Å–æ–º\n
        –ö–∞—Ä–µ: –°—Ç—Ä–∏–∂–∫–∞ —Å —á–µ—Ç–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏, —á–∞—Å—Ç–æ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ –∏–ª–∏ –ø–ª–µ—á.
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:  –æ—Ç 60 –¥–æ 120 –º–∏–Ω—É—Ç
                –¶–µ–Ω–∞: 800 —Å–æ–º""",
                    reply_markup=hair_keyboard
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_hairdressing_services')
        async def handle_back_to_hairdressing_services(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Hairdressing_services.parix(callback_query.message)

        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)



    class Haircoloring:
        @dp.message_handler(text='‚ûñ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å ‚ûñ')
        async def hair_cut(message: types.Message):
            hair_keyboard = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_hairdressing_services')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å')
            
            hair_keyboard.add(button2)
            hair_keyboard.add(button1)

            with open('image/image8.png', 'rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å ‚Äî —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –±—ã—Å—Ç—Ä–æ —Å–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–∑ –∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥—ã:\n
        –ú–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –ö–æ–ª–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        –ë—Ä–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        –ú–∞–∂–∏–º–µ—à
        –¢–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n 
        ‚ùóÔ∏è–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–∏–≤–∞–µ–º–æ–µ –Ω–∞ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥—É—Å—Ç–æ—Ç—ã –∏ –¥–ª–∏–Ω—ã –≤–æ–ª–æ—Å.""",
                    reply_markup=hair_keyboard
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_hairdressing_services')
        async def handle_back_to_hairdressing_services(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Hairdressing_services.parix(callback_query.message)


        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)


class Eyelashes:  
    @dp.message_handler(text='–†–µ—Å–Ω–∏—Ü—ã ü´∂')
    async def massaj(message: types.Message):
    
        keyboard3 = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
        button1 = types.KeyboardButton('‚ûñ –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ ‚ûñ')
        button2 = types.KeyboardButton('‚ûñ –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚ûñ')
        button3 = types.KeyboardButton('üëà –ù–∞–∑–∞–¥')
        button4 = types.KeyboardButton('‚ûñ –ú–∞—Å—Ç–µ—Ä —Ä–µ—Å–Ω–∏—Ü ‚ûñ')

        keyboard3.add(button1)
        keyboard3.add(button2)
        keyboard3.add(button3,button4)
        
        with open('image/image6.png','rb') as photo:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption="""–í –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 2 –≤–∏–¥–∞ —É—Å–ª—É–≥–∞ —Ä–µ—Å–Ω–∏—Ü–µ:
                \n- –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ
                \n- –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                """,
                reply_markup=keyboard3
            )

    @dp.message_handler(text='‚ûñ –ú–∞—Å—Ç–µ—Ä —Ä–µ—Å–Ω–∏—Ü ‚ûñ')
    async def show_lash_master_info(message: types.Message):
        master_name = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"
        master_description = (
            "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 5 –ª–µ—Ç\n"
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –õ—ç—à–º–µ–π–∫–µ—Ä\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü, –ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–æ–≤–µ–π\n"
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ê–∫–∞–¥–µ–º–∏—è –∫—Ä–∞—Å–æ—Ç—ã –∏ —ç—Å—Ç–µ—Ç–∏–∫–∏\n"
            "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç: +7 (987) 654-32-10"
        )

        with open('image/master_eyes.png', 'rb') as photo:  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ PNG —Ñ–∞–π–ª—É –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ—Å–Ω–∏—Ü
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=f"–ú–∞—Å—Ç–µ—Ä –ø–æ —Ä–µ—Å–Ω–∏—Ü–∞–º: {master_name}\n\n{master_description}"
            )


    class Eyelashextensions:
        @dp.message_handler(text='‚ûñ –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ ‚ûñ')
        async def eyelashextensions(message:types.Message):
            keyboard_eyes = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_eyelash')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ')
            
            keyboard_eyes.add(button2)
            keyboard_eyes.add(button1)

            with open('image/image9.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü –≤ —Å–∞–ª–æ–Ω–µ, —Ü–µ–Ω—Ç—Ä–µ –∫—Ä–∞—Å–æ—Ç—ã ‚Äì –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏ –æ–±—ä–µ–º–∞ —Ä–µ—Å–Ω–∏—Ü, –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–¥–∞—Ç—å –≥–ª–∞–∑–∞–º –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å .\n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:  –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ 2 —á–∞—Å–∞
                –¶–µ–Ω–∞: –æ—Ç 700 –¥–æ 1500 —Å–æ–º""",
                    reply_markup=keyboard_eyes
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_eyelash')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Eyelashes.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)

    class Eyelashlamination:
        @dp.message_handler(text='‚ûñ –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚ûñ')
        async def eyelashlamination(message:types.Message):
            keyboard_eyes = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_lamination')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
            
            keyboard_eyes.add(button2)
            keyboard_eyes.add(button1)

            with open('image/image10.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü ‚Äî –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–¥–∞–µ—Ç —Ä–µ—Å–Ω–∏—Ü–∞–º –≥—É—Å—Ç–æ—Ç—É –∏ –∫—Ä–∞—Å–∏–≤—ã–π –∏–∑–≥–∏–± –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç —Å–∏–ª—å–Ω—ã–º–∏, –æ–±—ä–µ–º–Ω—ã–º–∏ –∏ –±–ª–µ—Å—Ç—è—â–∏–º–∏. –í–∑–≥–ª—è–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º.\n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å
                –¶–µ–Ω–∞: 700 —Å–æ–º""",
                    reply_markup=keyboard_eyes
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_lamination')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Eyelashes.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)


class Manicure:  
    @dp.message_handler(text='–ú–∞–Ω–∏–∫—é—Ä üíÖ')
    async def massaj(message: types.Message):
    
        keyboard3 = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
        button1 = types.KeyboardButton('‚ûñ –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π ‚ûñ')
        button2 = types.KeyboardButton('‚ûñ SPA –º–∞–Ω–∏–∫—é—Ä ‚ûñ')
        button3 = types.KeyboardButton('‚ûñ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä ‚ûñ')
        button4 = types.KeyboardButton('üëà –ù–∞–∑–∞–¥')
        button5 = types.KeyboardButton('‚ûñ –ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ ‚ûñ')

        keyboard3.add(button1)
        keyboard3.add(button2)
        keyboard3.add(button3)
        keyboard3.add(button4, button5)

        with open ('image/image5.png' , 'rb') as photo:
        
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption="""–í –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –≤–∏–¥–∞ —É—Å–ª—É–≥–∞ –º–∞–Ω–∏–∫—é—Ä–∞:
                \n- –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π
                \n- SPA –º–∞–Ω–∏–∫—é—Ä
                \n- –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä""",
                reply_markup=keyboard3
            )

    @dp.message_handler(text='‚ûñ –ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ ‚ûñ')
    async def show_manicure_master_info(message: types.Message):
        master_name = "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞"
        master_description = (
            "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 7 –ª–µ—Ç\n"
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ –∏ –ø–µ–¥–∏–∫—é—Ä–∞\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: –î–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π, –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π\n"
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –®–∫–æ–ª–∞ –Ω–æ–≥—Ç–µ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞\n"
            "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç: +7 (912) 345-67-89"
        )

        with open('image/master_manekur.png', 'rb') as photo:  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ PNG —Ñ–∞–π–ª—É –º–∞—Å—Ç–µ—Ä–∞ –º–∞–Ω–∏–∫—é—Ä–∞
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=f"–ú–∞—Å—Ç–µ—Ä –ø–æ –º–∞–Ω–∏–∫—é—Ä—É: {master_name}\n\n{master_description}"
            )


    class Nailextensions:
        @dp.message_handler(text='‚ûñ –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π ‚ûñ')
        async def eyelashextensions(message:types.Message):
            keyboard_eyes = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_naillash')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π')
            
            keyboard_eyes.add(button2)
            keyboard_eyes.add(button1)

            with open('image/image11.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ–≥–¥–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ–≥—Ç–∏ –∫–ª–µ—è—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –ø–ª–∞—Å—Ç–∏–Ω—ã —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –∏ –±–∞–∑–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.–î–ª–∏–Ω–Ω—ã–µ —É—Ö–æ–∂–µ–Ω–Ω—ã–µ –Ω–æ–≥—Ç–∏ ‚Äî –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞. \n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–æ–ª—å—à–µ 60 –º–∏–Ω—É—Ç;
                –¶–µ–Ω–∞: –æ—Ç 500 –¥–æ 1000 —Å–æ–º""",
                    reply_markup=keyboard_eyes
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_naillash')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Manicure.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)

    class SPAmanicure:
        @dp.message_handler(text='‚ûñ SPA –º–∞–Ω–∏–∫—é—Ä ‚ûñ')
        async def spa(message:types.Message):
            keyboard_eyes = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_spamanik')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_SPA –º–∞–Ω–∏–∫—é—Ä')
            
            keyboard_eyes.add(button2)
            keyboard_eyes.add(button1)

            with open('image/image12.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–°–ø–∞-–º–∞–Ω–∏–∫—é—Ä - —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å –ø—Ä–æ—Ü–µ–¥—É—Ä, —Ü–µ–ª—å—é –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏ —Ä—É–∫, —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–æ–≥—Ç–µ–≤–æ–π –ø–ª–∞—Å—Ç–∏–Ω—ã –∏ —Å—Ç–∏–º—É–ª—è—Ü–∏—è –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è. –≠—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ —É—Ö–æ–¥–∞ –∑–∞ –Ω–æ–≥—Ç—è–º–∏, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –º–∞–Ω–∏–∫—é—Ä–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏–µ–π –∏ –ø–∞—Ä–∞—Ñ–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏–µ–π. \n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 1 –¥–æ 1,5 —á–∞—Å–∞;
                –¶–µ–Ω–∞: 1320 —Å–æ–º""",
                    reply_markup=keyboard_eyes
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_spamanik')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Manicure.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)  
    
    class Europeanmanicure:
        @dp.message_handler(text='‚ûñ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä ‚ûñ')
        async def euro(message:types.Message):
            keyboard_eyes = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_europeanmanicure')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä')
            
            keyboard_eyes.add(button2)
            keyboard_eyes.add(button1)

            with open ('image/image13.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä ‚Äì —ç—Ç–æ –≤–∏–¥ –º–∞–Ω–∏–∫—é—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ç–∏–∫—É–ª—ã. –ú–∞—Å—Ç–µ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—Ä–µ–∑—ã, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –∫—É—Å–∞—á–∫–∏. –†–∞–∑–º—è–≥—á–µ–Ω–Ω–∞—è –∫—É—Ç–∏–∫—É–ª–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø—É—à–µ—Ä–∞ –∏–ª–∏ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤–æ–π –ø–∞–ª–æ—á–∫–∏. \n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å;
                –¶–µ–Ω–∞: 600 —Å–æ–º""",
                    reply_markup=keyboard_eyes
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_europeanmanicure')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Manicure.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)  

class Massage:
    @dp.message_handler(text='–ú–∞—Å—Å–∞–∂ üíÜ‚Äç‚ôÄÔ∏è')
    async def massaj(message: types.Message):
    
        keyboard3 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button1 = types.KeyboardButton('‚ûñ –†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ ‚ûñ')
        button2 = types.KeyboardButton('‚ûñ –ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞ ‚ûñ')
        button3 = types.KeyboardButton('‚ûñ –ú–∞—Å—Å–∞–∂ —Å—Ç–æ–ø ‚ûñ')
        button4 = types.KeyboardButton('üëà –ù–∞–∑–∞–¥')
        button5 = types.KeyboardButton('‚ûñ –ú–∞—Å—Ç–µ—Ä –º–∞—Å—Å–∞–∂–Ω—ã—Ö —É—Å–ª—É–≥ ‚ûñ')

        keyboard3.add(button1)
        keyboard3.add(button2)
        keyboard3.add(button3)
        keyboard3.add(button4, button5)

        with open ('image/image5.png','rb') as photo:
        
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption="""–í –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –≤–∏–¥–∞ –º–∞—Å—Å–∞–∂–∞:
                \n- –†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂
                \n- –ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞
                \n- –ú–∞—Å—Å–∞–∂ —Å—Ç–æ–ø""",
                reply_markup=keyboard3
            )

    @dp.message_handler(text='‚ûñ –ú–∞—Å—Ç–µ—Ä –º–∞—Å—Å–∞–∂–Ω—ã—Ö —É—Å–ª—É–≥ ‚ûñ')
    async def show_massage_master_info(message: types.Message):
        master_name = "–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞"
        master_description = (
            "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 10 –ª–µ—Ç\n"
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ú–∞—Å—Å–∞–∂–∏—Å—Ç\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: –õ–µ—á–µ–±–Ω—ã–π –º–∞—Å—Å–∞–∂, –∞–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂\n"
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂\n"
            "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
            "–ö–æ–Ω—Ç–∞–∫—Ç: +7 (923) 456-78-90"
        )

        with open('image/master_massage.png', 'rb') as photo:  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ PNG —Ñ–∞–π–ª—É –º–∞—Å—Ç–µ—Ä–∞ –º–∞—Å—Å–∞–∂–∞
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=f"–ú–∞—Å—Å–∞–∂–∏—Å—Ç: {master_name}\n\n{master_description}"
        )

    
    class Relaxingmassage:
        @dp.message_handler(text='‚ûñ –†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ ‚ûñ')
        async def eyelashextensions(message:types.Message):
            keyboard_massaj = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_relaxmassaj')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂')
            
            keyboard_massaj.add(button2)
            keyboard_massaj.add(button1)

            with open ('image/9007.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ ‚Äî –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å–Ω—è—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∏ –Ω–µ—Ä–≤–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å –º—ã—à—Ü—ã, —É–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–æ–≤—ã—Å–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç. –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –≥–æ–ª–æ–≤–Ω—ã–º –º–æ–∑–≥–æ–º –∏ –º—ã—à—Ü–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –≤–ª–µ–∫—É—Ç –∑–∞ —Å–æ–±–æ–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º—ã—à—Ü.\n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å;
                –¶–µ–Ω–∞: 1500 —Å–æ–º""",
                    reply_markup=keyboard_massaj
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_relaxmassaj')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Massage.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)

    class Facialmassage:
        @dp.message_handler(text='‚ûñ –ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞ ‚ûñ')
        async def facialmassage(message:types.Message):
            keyboard_massaj_facial = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_facimassaj')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞')
            
            keyboard_massaj_facial.add(button2)
            keyboard_massaj_facial.add(button1)

            with open ('image/image14.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞ ‚Äì —ç—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–Ω—É—Å–∞ –∫–æ–∂–∏, —É–ª—É—á—à–µ–Ω–∏–µ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –∫–æ–∂–µ, —É—Å–∏–ª–µ–Ω–∏–µ –µ–µ –∑–∞—â–∏—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Ä–∞–∑–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –º–∏–º–∏—á–µ—Å–∫–∏—Ö –º–æ—Ä—â–∏–Ω.\n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å;
                –¶–µ–Ω–∞: 1500 —Å–æ–º""",
                    reply_markup=keyboard_massaj_facial
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_footmassaj')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Massage.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)

            
    class Footmassage:
        @dp.message_handler(text='‚ûñ –ú–∞—Å—Å–∞–∂ —Å—Ç–æ–ø ‚ûñ')
        async def footmassage(message:types.Message):
            keyboard_massaj_foot = types.InlineKeyboardMarkup()
            
            button1 = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_footmassaj')
            button2 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úçÔ∏è', callback_data='book_–ú–∞—Å—Å–∞–∂ —Å—Ç–æ–ø')
            
            keyboard_massaj_foot.add(button2)
            keyboard_massaj_foot.add(button1)

            with open('image/image15.png','rb') as photo:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photo,
                    caption="""–ú–∞—Å—Å–∞–∂ —Å—Ç–æ–ø ‚Äì —ç—Ç–æ –¥—Ä–µ–≤–Ω—è—è –≤–æ—Å—Ç–æ—á–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –¥–ª—è –æ–±—â–µ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è, –ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è. –ù–∞ —Å—Ç–æ–ø–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –æ–∫–æ–ª–æ 70 —Ç—ã—Å—è—á –Ω–µ—Ä–≤–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π! –ö–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ —Ä–∞–±–æ—Ç—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤.\n
        
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å;
                –¶–µ–Ω–∞: 1500 —Å–æ–º""",
                    reply_markup=keyboard_massaj_foot
        )
            
        @dp.callback_query_handler(lambda c: c.data == 'back_to_footmassaj')
        async def handle_back_to_eyelash(callback_query: types.CallbackQuery):
            await bot.answer_callback_query(callback_query.id)
            await Massage.massaj(callback_query.message)
        
        @dp.callback_query_handler(lambda c: c.data.startswith('book_'))
        async def handle_book_to_hair(callback_query: types.CallbackQuery):
            await BookingHandler.handle_booking(bot, callback_query)

        @dp.message_handler(state=BookingState.waiting_for_name)
        async def handle_name_input(message: types.Message, state: FSMContext):
            await BookingHandler.handle_name_input(message, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state='*')
        async def handle_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_date_selection(bot, callback_query, state)

        @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=BookingState.waiting_for_time)
        async def handle_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
            await BookingHandler.handle_time_selection(bot, callback_query, state)



if __name__ == '__main__':
    executor.start_polling(dp,skip_updates=True,on_startup=on_startup) 